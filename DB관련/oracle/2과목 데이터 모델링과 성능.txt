데이터 모델과 성능

성능데이터모델링 - 데이터베이스 성능향상을 목적으로 데이터 모델링때 부터 성능과 관련된 사항을 반영하는 것

(중요)
데이터 모델링의 순서 - 1. 데이터 모델링시 정규화를 정확하게 수행한다.
		     2. 데이터베이스의 용량을 산정한다.
		     3. 데이터베이스에 발생하는 트랜잭션의 유형을 파악한다.
		     4. 용량과 트랜잭션의 유형에 따라 반정규화를 수행한다.
		     5. 이력모델의 조정, PK/FK 조정 , 슈퍼/서브 타입 조정을 수행한다.

성능데이터 모델링시 고려사항 - 1. 정규화를 통하여 중복된 데이터를 제거함으로써 성능의 향상을 가져올 수있다. -> 정규화가 무조건 검색성능을 떨어트리는 것은 아니다.
		                2. 용량산정은 데이터베이스에 발생하는 트랜잭션의 유형과 양을 분석하는 자료이다.
	                            3. 물리적 데이터 모델링시 PK/FK의 칼럼 순서 조정 FK인덱스 생성등은 성능향상을 위한 중요한 요소이다.
			    4. 이력데이터는 시간에 따라 반복적으로 발생하기 때문에 대량의 데이터일 가능성이 높아 특별히 성능을 고려하여 칼럼 등을 추가하도록 설계한다.
			    
정규화 과정 - 1. 도메인이 원자값만을 가지도록 변경 -제 1정규화
	      2. 부분적 함수적 종속 제거 - 제 2정규화
	      3. 이행적 함수적 종속 제거 - 제 3정규화
	      4. 결정자가 후보키가 아닌 키(속성) 제거 - BCNF형
	      5. 다치 종속 제거 - 제 4정규화
	      6. 조인 종속 제거 - 제 5정규화
반정규화 - 성능향상과 시스템의 운영 및 개발의 단순화을 위해 중복, 통합, 분리등을 수행하는 모델링 기법이다.

반정규화 시의 고려사항 - 1. 다량의 조인이 불가피 한 경우 데이터 제공의 직시성을 위하여 반정규화를 수행한다. 
		        (billing [계산서]의 경우 다수의 테이블을 조인하여 계산되어야 함으로 계산된 합계 금액의 컬럼을 추가하는 등의 컬럼 반정규화 기법이 사용될 수 있다.)
		        2. 다량의 데이터 탐색의 경우 인덱스가 아닌 물리 저장 기법인 파티셔닝과 클러스터링을 사용하여 성능을 향샹시킨다.
		        3. RDBMS는 현재 레코드를 기준으로 이전 레코드와 이후 레코드의 접근을 window 함수를 통해 접근할수 있다.
		        4. 반정규화 테이블은 집계 테이블 뿐만아니라 다양한 유형에 대하여 반정규화 테이블을 적용할 수 있다.
			(다수 테이블의 키를 연결하여 만들어지는 검색 테이블의 경우 사용가능)

반정규화 기법 -  테이블의 반정규화
	         1. 테이블 분할기법 - 테이블 수직 분할 [컬럼에 대한 분할]
		[분할 전]
		주 키 | 컬럼1 | 컬럼2 | 컬럼3 | 컬럼4 | 컬럼5 | 컬럼6
		ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		0001 | 값1    | 값2    | 값3   | 값4    | 값5    | 값6
		ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		.
		.
		.
		[분할 후]
		|주 키 | 컬럼1 | 컬럼2 | 컬럼3 |                                        |주 키 | 컬럼4 | 컬럼5 | 컬럼6 |
		ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ			     ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		|0001 | 값1    | 값2    | 값3   |			     |0001 | 값4    | 값5    | 값6   |
		.						     .
		.						     .
		.						     .
		
			        - 테이블 수평 분할 [레코드(튜플)에 대한 분할]
		[분할 전]
		주 키 | 컬럼1 | 컬럼2 | 컬럼3 | 컬럼4 | 컬럼5 | 컬럼6
		ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		0001 | 값1    | 값2    | 값3   | 값4    | 값5    | 값6
		ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		0002 | 값1    | 값2    | 값3   | 값4    | 값5    | 값6
		ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		0003 | 값1    | 값2    | 값3   | 값4    | 값5    | 값6
		ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		0004 | 값1    | 값2    | 값3   | 값4    | 값5    | 값6
		ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		[분할 후]
		
		주 키 | 컬럼1 | 컬럼2 | 컬럼3 | 컬럼4 | 컬럼5 | 컬럼6	주 키 | 컬럼1 | 컬럼2 | 컬럼3 | 컬럼4 | 컬럼5 | 컬럼6
		ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		0001 | 값1    | 값2    | 값3   | 값4    | 값5    | 값6	0003 | 값1    | 값2    | 값3   | 값4    | 값5    | 값6
		ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		0002 | 값1    | 값2    | 값3   | 값4    | 값5    | 값6	0004 | 값1    | 값2    | 값3   | 값4    | 값5    | 값6
		ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	         

		2. 테이블의 병합 기법
		- 1:1 관계에 있는 테이블을 하나의 테이블로 병합하여 성능을 향상시킨다.
		- 1:N 관계에 있는 테이블을 병합한다. 그러나 많은양의 중복데이터가 발생한다.
		- 슈퍼/서브 타입 관계가 발생하면 테이블을 통합하여 성능을 향상시킨다.

		3. 테이블 추가 기법
		- 중복 테이블 추가 : 다른 업무이거나 서버가 다를 경우 동일한 구조의 테이블을 중복하여 원격 조인을 제거.
		- 통계 테이블 추가 : sum이나 avg 등을 미리 수행하여 계산해두어야 하는 컬럼들을 모아 테이블로 만들어 둠으로써 조회시 성능을 향상한다.
		- 이력 테이블 추가 : 마스터 테이블에 존재하는 레코드를 중복하여 이력테이블에 존재시키는 방법
		- 부분 테이블 추가 : 테이블 내에 자주 이용하는 컬럼들이 존재할 경우 따로 모아서 테이블을 생성시키는 방법

	     -  컬럼의 반정규화
	     1. 중복 컬럼 추가 : 조인시 성능저하를 예방하기 위하여 중복된 컬럼을 위치시킨다.
	     2. 파생 컬럼 추가 : 트랜잭션이 처리되는 시점의 계산에 의한 성능저하를 예방하기 위하여 미리 계산한 값을 컬럼에 보관할 수 있도록 컬럼을 추가 
	     3. 이력 테이블 컬럼 추가 : 대량의 이력데이터를 처리시 최근값의 조회등을 검색할 때 발생하는 성능 저하를 예방하기 위하여 최신여부와 같은 기능성 컬럼을 추가
	     4. PK에 의한 컬럼 추가: 복합키로 구성된 PK는 검색시 성능이 저하됨으로 검색을 위한 PK컬럼을 새로 추가하고 복합키를 일반속성으로 구성하는 방법
	     5. 응용시스템 오작동을 위한 컬럼 추가 : 오류로 인해 원래의 값으로 복구시키고자 하는 경우 이전데이터를 임시적으로 중복하여 보관하는 방법.

	     - 관계 반정규화
	     여러 경로를 통해 조인이 가능하지만 성능저하를 예방하기위해 좀 더 짧은 경로의 추가적인 관계를 맺는 방법

	     - (중요) 파티셔닝 기법  - 논리적으론 하나의 테이블이나 물리적으론 여러개의 테이블로 분리하여 데이터 액세스 성능을 향상시키고 데이터 관리방법도 개선할 수 있도록 테이블에 적용하는 방법

SQL문의 패턴 - SQL문의 Select문 조회시에 where절에 =(EQUAL,동등) 조건에 해당하는 컬럼이 테이블의 PK인덱스의 첫번재 순서로 오는게 좋다.
	        [그 다음이 범위값에 해당하는 속성 (between a and b)


분산데이터베이스를 이용한 효율성 증대- 1. 실시간 업무적인 특성을 가지고 있을때 사용. [특징 : 빠른 응답속도 통신비 절감]
				  2. 백업 사이트를 구성할때 간단하게 분산기능을 적용하여 구성가능
				  3. 공통코드 , 기준정보등의 마스터 정보는 분산데이터베이스에 복제 분산을 적용

[GSI 구성시 - GSI는 통합정보 시스템으로 분산정보 시스템과 대치되는 개념이다.]

[분산데이터베이스의 장점]
빠른 응답속도와 통신비 절감
지역자치성과 시스템의 점증적 확장성이 용이
신뢰성과 가용성
효용성과 융통성
시스템 규모의 조절
지역 사용자의 요구 수용증대
[분산데이터베이스의 단점]
잠재적 오류 증가
통재의 어려움
불규칙한 응답속도
설계 관리의 복잡성 -> 비용증대
소프트웨어 개발 비용 증대


	






	




	