DDL 복습

--Create--




(EMP 테이블 속성)         
                              
EMPNO 기본키  	NUMBER(10,0)
ENAME 		VARCHAR2(20 BYTE)
SAL 		NUMBER(10,2)
DEPTNO 외래키	VARCHAR2(4 BYTE) [삭제시 dept 테이블의 deptno 도 삭제 옵션]
CREATEDATE 	DATE		 [제약조건 default 값이 sysdate]
EMPSEX 		VARCHAR2(3 BYTE) [제약조건: '남','여' 만 입력가능 그리고 not null]

(DEPT 테이블 속성)

DEPTNO 기본키 	VARCHAR2(4 BYTE)
DEPTNAME	VARCHAR2(20 BYTE)

1.위 테이블을 생성하시오.

create or replace table emp(
	empno number(10),
	ename varchar2(20),
	sal number(10,2) default 0,
	deptno varchar2(4),
	createdate date default sysdate,
	empsex varchar2(3) default '남',
	constraint emppk primary key(empno),
	constraint deptno foreign key(deptno) references dept(deptno)
	on delete cascade,
	constraint emp_sex_domain check(empsex IN('남','여') and empsex is not null)
);

create or replace dept(
	deptno varchar2(4) primary key,
	deptname varchar2(20)
)

1-2 mysql의 on update cascade와 같은 동작을 하는 trigger를 작성하시오.

create or replace trigger update_before_emp before update on emp    -- emp 테이블 업데이트 이전에 동작시켜라
referencing new as new old as old -- 변경 후 (덮어쓸) row의 집합 테이블을 new로 명명 하고 변경되기 전 row의 집합을 old로 명명한다.
for each row -- 각각의 행에 대하여
[when 조건]
declare
begin	--다음 문장을 실행시켜라--
	update dept
	set deptno =: new.deptno
	where deptno =: old.deptno;
end;
/

1-3 스키마 생성 명령
create schema 스키마명;

1-4 테이블의 복사 명령
create table employee 
as select * from emp;

1-5 인덱스 생성 명령
create [unique] index 인덱스명
on 테이블명(속성1 [asc/desc], 속성2[asc/desc]....); 

1-6 뷰 생성 명령
create view 뷰명
as select 속성1,속성2, .... from 테이블명;

1-7 시노님 생성 명령
create [public/private] synonym 시노님명 for 객체명;

1-8 시퀀스 생성 명령
create sequence 시퀀스명
increment by 증감 숫자
start with 시작숫자
minvalue 최솟값
maxvalue 최댓값
[cycle/nocycle]
[cache/nocache] 1;

=====================================================================================================
(EMP 테이블 속성)         
                              
EMPNO   	NUMBER(10,0)
ENAME 		VARCHAR2(20 BYTE)
SAL 		NUMBER(10,2)
DEPTNO		VARCHAR2(4 BYTE) 
CREATEDATE 	DATE		

(DEPT 테이블 속성)

DEPTNO 기본키 	VARCHAR2(4 BYTE)
DEPTNAME	VARCHAR2(20 BYTE)

2.  위 테이블을 생성하고 1. 에서 생성된 테이블과 동일하게 제약조건과 속성을 추가하시오.
create or replace table emp(
	empno number(10),
	ename varchar2(20),
	sal number(10,2),
	deptno varchar2(4),
	createdate date

);

create or replace dept(
	deptno varchar2(4) primary key,
	deptname varchar2(20)
)
-- alter--
2-1. emp 테이블의 기본키 추가 기본키 제약조건명 emppk 

alter table emp add constraint emppk primary key(empno);

2-2. emp 테이블의 외래키 추가 및 on delete cascade 옵션 추가.
alter table emp add constraint empfk foreign key(deptno) references dept(deptno) on delete cascade;

2-3. emp 테이블의 empsex 속성 추가.
alter table emp add empsex varchar2(3) default '남' constraint emp_sex_domain check(empsex in('남','여') and empsex is not null);

2-4. emp 테이블에 email 속성을 추가하시오(varchar2(20))
alter table emp add email varchar2(20);

2-5. emp 테이블의 email 속성을 제거 하시오.
alter table emp drop column email;

2-6 emp 테이블의 empsex 속성의 자료형을 varchar(6)로 변경하시오.
alter table emp modify empsex varchar2(6);

2-7 emp 테이블의 이름을 employees 로 변경하시오.
alter table emp rename to employees;

2-8 emp 테이블의 empsex를 empgender로 속성명을 변경하시오.
alter table emp rename column empsex to empgender; 

=======================================================================
-- drop -- 
3-1 테이블 삭제 명령
drop table 테이블명 [cascade/restrict]
3-2 뷰 삭제 명령
drop view 뷰명 [cascade/restrict]
3-3 트리거 삭제 명령
drop trigger 트리거 명[cascade/restrict]
3-4 도메인 삭제 명령
drop domain 도메인 명 [cascade/restrict]
3-5 스키마 삭제 명령
drop schema 스키마 명 [cascade/restrict]
3-6 인덱스 삭제 명령
drop index 인덱스 명 [cascade/restrict]



--select--
4-1. alias와 distinct

4-1-1 employees 테이블의 manager_id와 department_id를 "관리자id" 와 "부서id" 로 중복값을 배제하여 표현하시오.
	[단 as 를 사용하며 manager_id로 내림차순으로 정렬]

	select distinct manager_id as "관리자id" , department_id as "부서id"
	from employees
	order by manager_id desc;

4-1-2   4-1-1을 as 를 사용하지 않고 작성하시오.
	select distinct manager_id "관리자id" , department_id "부서id"
	from employees
	order by manager_id desc;

4-1-3 alias를 영어로 부여할 시 "" 큰 따옴표를 사용하지 않아도 된다.
	select distinct manger_id mg_id, department_id dp_id
	from employees
	order by manager_id desc;


4-2 비교연산자[<,>,<=,>=,!=,<>,^=], 논리연산자[or,and,not], sql 연산자[in, exists, is null, like, between]

4-2-1 employees테이블에서 department_id 가 30,60,90이 아닌 값을 출력하시오.
	select *
	from employees
	where department_id != 30 and department_id !=60 and department_id !=90;

4-2-2 sql연산자를 이용하여 위 4-2-1 과 같은 sql문을 작성하시오.
	select *	
	from employees
	where department_id not in(30,60,90);

4-2-3 앞의 4-2-2에선 department_id 가 30,60,90이 아니며, null값을 지닌 튜플은 비교할 수 없음으로 출력값에
	표함되지 않는다. null값을 포함하여 출력하고자 할때의 sql문을 작성하시오.
	1) 	
	select * 
	from employees
	where department_id not in(30,60,90) or department_id is null;
	2)
	select *
	from employees emp
	where not exists (select department_id
		     from departments dept
		     where dept.department_id in(30,60,90)
		     and emp.department_id = dept.department_id);

4-2-4 employees테이블에서 first_name이 3번쨰 문자가 y이며 er로 끝이나는 직원들의 정보를 출력하시오.
	select * 
	from employees
	where first_name like '__y%er';

4-2-5 employees 테이블에서 salary 가 5000이상 9000이하인 직원들의 정보를 출력하시오.
	1)
	select * 
	from employees
	where salary >=5000 and salary <=9000;
	2)
	select *
	from employees
	where salary between 5000 and 9000;


--------------------------------------------------------------------------------------------------
5. 그룹함수와 조건절

5-1 employees 테이블의 각 부서의 사원 수를 출력하시오.
	1) department_id 가 null인 튜플 그룹을 포함하여 출력
	select department_id, count(*)
	from employees
	group by department_id;
	
	2) department_id 가 null인 튜플 그룹은  제외하여 출력
	select department_id, count(department_id)
	from employees
	group by department_id;
	



5-2 employess 테이블의 각 부서의 최대 급여, 최소급여 , 각 부서의 급여 합, 사원 수, 평균 값, 분산 값, 표준편차를 
     구하시오.
 
select max(salary),min(salary), sum(salary), count(*), avg(salary), variance(salary) , stddev(salary)
from employees
group by department_id;


5-3 부서별 최대 급여가 6000이상인 부서만 출력하시오.
select department_id,max(salary)
from employees
group by department_id
having max(salary)>=6000;

--------------------------------------------------------------------------------------------------
6. type casting 

6-1. 묵시적 타입케스팅

6-1-1. salary가 24000인 직원을 검색하시오(문자열 조건으로 검색)

select * 
from employees
where salary = '24000';

6-2. 명시적 타입 캐스팅
	6-2-1 문자열-> 숫자
	select *
	from employees
	where salary = to_number('24000');
	6-2-2 숫자 -> 문자
	select to_char(salary) char_salary, salary
	from employees;
	6-2-3 날짜 -> 문자 
	select to_char(hire_date, 'yyyy-mm-dd') char_hire_date, hire_date
	from employees;

		from employees;
	6-2-4 문자 -> 날짜
	select to_date('2012-05-21')
	from dual;

	6-2-5 문자-> 날짜 변환시 sqldeveloper에 설정된 포맷 형식으로 출력된다.
	select to_date('2012-05-21','yyyy-mm-dd')
	from dual;

※ 묵시적 형변환은 검색시 내부적으로 인덱스를 사용하지 않아 검색 속도가 명시적 sql문보다 느리다.


-------------------------------------------------------------------------------------------------
7. 문자열 함수 예제를 작성하시오.

7-1. ASCII('char')
	select ascii('A')
	from dual;

7-2 char(number)
	select char(65)
	from dual;


7-3 substr('문자열','시작문자위치','추출 문자개수')
	--bbcc-- 추출
	select substr('aabbccdd',3,4)
	from dual;

7-4 concat('문자열1','문자열2')
	select concat('i am a boy', 'and i''m genious')
	from dual;

7-5 initcap('영 문자열')
	select initcap('i am a boy and i''m genious')
	from dual;

7-6 upper('영문자열')

	select upper(i am a boy)
	from dual;

7-7 lower('영문자열')
	select lower('I AM A BOY')
	from dual;

7-8 length('문자열')
	select length('핳핳 하')
	from dual;

7-9 lengthb('문자열')
	select lengthbyte('핳핳 하')
	from dual;

7-10 ltrim('문자열', '왼쪽에서 부터 제거할 연속된 문자들')
	select ltrim('aabbccdd','ab')
	from dual;
	--결과 'ccdd'
	
	select ltrim('aabbccdd', 'ad')
	from dual;
	--결과 'bbccdd'

7-11 rtrim('문자열', '오른쪽에서 부터 제거할 연속된 문자들')
	select rtrim('aabbccdd','cbd')
	from dual;
	--결과 'aa'
7-12 trim('문자열' , '양쪽에서 제거할 공백 문자열')
	1)
	select trim('     i am a boy    ') from dual;
	2) trim을 ltrim 또는 rtrim 처럼 사용 및 양쪽에 존재하는 특정 문자 제거
	[단 이 경우 하나의 문자패턴만을 지정 가능 'ab' 이런식으로 여러 문자를 지정할 수 없다]
	select 	trim(leading 'a' from 'aabbccdd'),
		trim(trailing 'd' from 'aabbccdd'),
		trim(both 'a' from 'aabbccddaa')
	from dual;

7-13 replace('문자열','문자열 내 문자열','대체할 문자열')

	select replace('i am a boy', 'boy', 'girl')
	from dual;

7-14 translate('문자열','바꿀 문자들','대응하는 대체 문자들')

	select translate('i am a boy','ab','cd')
	from dual;
	-- 출력: i cm c doy

7-15 instr('문자열', '찾을 문자열', '검색 시작위치', 몇 번째)

	select instr('aabbccddaaccddbbaaeeff', 'aa', 5, 2)
	from dual;
	-- 17

	select instr('aabbccddaaccddbbaaeeff', 'aa', 5, 1)
	from dual;
	-- 9
	
	select instr('aabbccddaaccddbbaaeeff', 'aa', 5)
	from dual;
	--9
	select instr('aabbccddaaccddbbaaeeff', 'aa')
	from dual;
	--1
----------------------------------------------------------------------------
8. 시간 관련 [DB에서 시간에 관련하여 조건 검색시 +,- 상수의 연산은 숫자를 day를 기준으로 판단하여 연산이 가능하다.]

8-1 시간관련 함수
8-1-1 to_date('문자열') 
	select to_date('2012-08-31','yyyy-mm-dd')
	from dual;
 
8-1-2 add_months(날짜 데이터, '가산할 달 수 ')
	select add_months(sysdate, 5)
	from dual;

8-1-3 months_between(날짜 데이터1 , 날짜 데이터2)

	select months_between(sysdate,to_date('2020-01-10'))
	from dual;

8-1-4  extract([year|month|day] from 날짜데이터)
	select extract(year from sysdate) from dual;
	select extract(month from sysdate) from dual;
	select extract(day from sysdate) from dual;

8-2 시간관련 연산
	8-2-1 날짜 데이터와 날짜 데이터의 가,감산 및 곱셈, 나눗셈 중에 
	        연산이 가능한 사칙연산자에 대한 예제를 작성하시오.
	select sysdate - to_date('2012-08-08')
	from dual;

	8-2-3 현시점의 날짜데이터에  1년 2개월을 가.감산하시오.
	select sysdate + interval '1-2' year to month 
	from dual;
 	
	select sysdate - interval '1-2' year to month
	from dual;

	8-2-3 현시점의 날짜 데이터에 10일 10시간 30분을 30 초를 감산 해보시오.
	select systimestamp - interval '10 10:30:30' day to second from dual;
	[day|hour|minute,second]
	select current_timestamp - interval '10 10:30:30' day to second from dual;

	
--------------------------------------------------------------------------------------------
9. 숫자형 함수

9-1. 절대값 반환함수
select abs(-10) from dual;

9-2. 반올림 함수
select round(10.2),round(10.8)
from dual;

9-3. 소수점 3번째 자리에서 반올림 하시오.
select round(10.123456, 2)from dual;

9-4. 2번째 자리에서 반올림 하시오.
select round(12345,-2) from dual;

9-5. 소수점 3번째 자리에서 올림하시오.
select round(10.123456+0.005,2) from dual;

9-6. 정수 올림 함수
select ceil(10), ceil(10.1)
from dual;

9-7 정수 내림 함수
select floor(10),floor(9.9)
from dual;

9-8. 9의 제곱근을 구하시오
select sqrt(9) from dual;

9-9. 3의 세 제곱을 구하시오.
select POWER(3,3) from dual;

9-10. 9에서 2를 나눈 나머지 값을 구하시오
select mod(9,2) from dual;

9-11. 소수점 2번째 자리 까지 버리시오.
select trunc(10.1234, 2) from dual;

9-12. 음수 값이면 -1 0이면 0 양수 값이면 +1을 반환하는 함수
select sign(-19), sign(0), sign(10)
from dual;

-------------------------------------------------------------------------
10. null함수

10-1 nvl(attr1, replaceVal)
	select EMPLOYEE_ID, FIRST_NAME, LAST_NAME ,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY
      	        ,nvl(COMMISSION_PCT,0) COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID
	from employees;

10-2 nvl2(attr1, notNullvalue ,replaceVal)
	select EMPLOYEE_ID, FIRST_NAME, LAST_NAME ,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY
      	        ,nvl2(COMMISSION_PCT,COMMISSION_PCT,0) COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID
	from employees;

10-3 colease(attr1,attr2,attr3)
	-- WITH 문 
	with coalesce_T as (
        		select 20  attr1, null as attr2,null as attr3 from dual
        		union
        		select null, 10, 20 from dual
    		union 
        		select null, null, 30 from dual
        		union 
        		select 10, null , 30 from dual
        		union
        		select null, 20 , null from dual) 
	select coalesce(attr1,attr2,attr3),attr1,attr2,attr3 from coalesce_T;

10-4 nullif(expr1,expr2)

	select nullif(10,10), nullif(10,20)
	from dual;


---------------------------------------------------------------------------
11. decode(attr1, 비교값, 같지않을시 값), CASE 문법 [조건관련]

11-1 decode()함수는 switch문과 동일하다.

	select employees.*,decode(job_id,'AD_VP',salary*1.2,
                                                      'IT_PROG',salary*1.1,
                                                      'FI_ACCOUNT',salary*1.3,salary*1)
	 from employees;		
	
11-2 select employees.* , case job_id when 'AD_VP' then salary*1.2
                                               when 'IT_PROG' then salary*1.1
                                               when 'FI_ACCOUNT' then salary*1.3
		         else salary*1
		         end
       from employees;

11-3 select employees.*, case when job_id='AD_VP' then salary*1.2
                                     when job_id='IT_PROG' then salary*1.1
                                     when job_id='FI_ACCOUNT' then salary*1.3
       	   	       else salary*1
		       end
      from employees;
	[case 문법은 when 앞에 비교할 속성을 지정하지 않고 when에서 해당 속성의 조건을 작성 할 수 있으므로 
	 다른 프로그래밍 언어의 if - else if 문과 동일하다고 볼 수 있다.]
--------------------------------------------------------------------------
12. 수도컬럼 rownum , 숨겨져있는 컬럼 rowid
	12-1 1~10 행까지 출력
	select rownum,*
	from employees
	where rownum <10;
	
	12-2 10행 이후의 행을 출력
	-- 잘못된 sql
	select rownum , * 
	from employees
	where rownum >10;
	-- 10행 이후의 데이터를 출력하는 sql
	select *
	from (select rownum as rowcount, employees.*
	       from employees) emp
	where emp.rowcount > 10;

	※설명 rownum는 존재하지 않는 가상의 컬럼이기 때문에 select문의 실행순서에 따라 where절의 조건을
	만족하고 난뒤 select에 존재하는 rownum에 할당되어 진후 rownum 가 내부에서 묵시적으로 값이 증가하게 된다.

	5 -select rownum
   	1 - from employees
	2 -where rownum > 10;
	3 - group by 
	4 - having
	6 - order by
	
	위의 번호대로 select문은 실행이 되는데 rownum는 default로 1을 가지고 있으나 
	2번의 where 절에서 조건을 만족시키지 못함으로 rownum는 값의 증가가 이루어지지 않는다.
	그러므로 출력값에 어떠한 튜플도 나오지 않게 된다.
	
	그러나 서브쿼리를 이용하여 rownum를 속성으로 추가하여 employees 테이블을 새로 정의한 emp
	테이블은 rownum가 각 튜플에 해당하는 값이 이미 할당된 상태임으로 검색이 가능해진다.

	3- select rownum
	1- from employees
	2- where rownum<=10;
	의 경우 rownum은 default로 1임으로 2번의 조건을 만족하고 조건을 만족한 3의 rownum에 값(1)을 출력
	다시 2번에서 조건을 비교시 rownum은 1이 증가하게된 상태로 조건을 비교하게 되며
	이것을 10번 반복하여 10행까지 출력되게 된다.

	
	12-3 rowid
	※ rowid 는 테이블의 각 튜플에 부여된 고유한 id값이며, 이를 통해 중복된 값을 제거하는 sql문을 작성할 수있다.
	
	delete * 
	from employees 
	where rowid in (select max(rowid)
		        from 중복된 값이 저장된 테이블 A
		        group by A.중복된값을 저장한 속성1, A.중복된값을 저장한 속성2... )
		        Having count(*) >1);


----------------------------------------------------------------------------------
13 DCL
	
13-1 Grant 사용자의 권한 부여
	grant [resource|connect|dba] to 사용자;

13-2 Grant 객체의 사용권한 부여
	grant [select|delete|insert|update|alter|references|index|all] on 객체 to 사용자 [with grant option];

13-3 revoke 권한 회수 명령
	revoke [select|delete|insert|update|alter|references|index|all] on 객체 from 사용자;

---------------------------------------------------------------------------------

14 TCL

14-1 트랜잭션 결과값 반영 명령
	commit
14-2 트랜잭션 결과 취소 명령
	rollback
14-3 저장점 
	commit;

	insert into employees(attr1,attr2,attr3....)
	values(값1, 값2, 값3....);
	
	savepoint s1;
	
	update employees
	set attr1 = '변경값1', attr2 ='변경값2',.....
	where (조건);

	savepoint s2;
	
	delete from employees where (조건);

	1) 위 순서대로 명령 실행 시 s1으로 복구 명령
	rollback to s1;
	2) rollback; 명령을 수행시 이동하는 포인트는?
	commit; 명령 직후.
	 
	3) 세이브 포인트를 만든후 commit을 하면 저장점으로 돌아갈수 있나?
	commit이 되는 순간 savepoint는 전부 삭제된다. 일반 rollback; 도 마찬가지
	
	4) 위 순서대로 실행후 s1으로 rollback 시키고 난 직후 다시 s2저장점으로 복구하고 싶다고 할때
	rollback to s2; 명령은 정상 실행이 되나?
	실패 (이유: s1저장점으로 복구시엔 s2 세이브 포인트는 존재하지 않는다.
		s2저장점을 먼저 rollback후 s1저장점으로는 rollback이 가능하다.)

-----------------------------------------------------------------------------------------
15 JOIN


15-1.동등조인 (Where 절의 동등조건을 이용한 조인 방법)

15-1-1. employees테이블과 departments 테이블을 부서id 컬럼으로 동등조인하는 sql문을 작성하시오.
select * 
from employees emp, departments dept
where emp.department_id = dept.department_id;

동등조인은 해시함수를 통해 이루어진다.

15-2. ANSI Inner join 

15-2-1. 15-1-1의 문제를 Ansi 조인을 통해 작성하시오.
	1)
	select * 
	from employees emp inner join departments dept
	on emp.department_id= dept.department_id;

	2) 
	select *
	from employees emp join departments dept
	on emp.department_id = dept.department_id;

	3)
	select * 
	from employees inner join departmentsusing(department_id);


15-2-3 Natural join
	1) 
	select * from employees natural join departments;
	※ inner join과 natural join은 결과가 같다. 그러나 위 sql문과 inner join문은 결과가 다르게 나타나는데
	inner join엔 유의점이 존재한다. employees 테이블엔 department_id 속성과 manager_id 속성값이 존재하는데
	이 때 manager_id 컬럼은 각 사원을 관리하는 상급자를 의미한다.
	문제는 departments 테이블도 department_id와 manager_id 컬럼을 포함하고있는데 이때 manager_id는
	부서의 관리자(헤드) 즉 부장의 사원아이디를 의미하는 것이다.
	두 테이블에 department_id 값은 의미가 같아 join을 하는데 문제가 없는 컬럼이나, manager_id 컬럼은 의미
	가 완전히 달라 join 조건에는 부합하지 않는 컬럼이다.
	문제의 natural join의 경우에는 같은 컬럼이 존재할 경우 join속성을 알 수 없다. 그렇기에 위 sql문의 inner join과
	natural join의 결과가 다르게 나오는 것이다.


--------------------------------------------------------------------------------------
16. 외부조인(outer join)
-- left join은 좌측으로 기재된 테이블의 모든 튜플을 표시하여 우측에 기재된 테이블의 튜플과 동등조인을 하는것이다.
(좌측 테이블은 조건을 만족시키지 않아도 모든 튜플을 표시하고 우측의 테이블은 조건에 맞는 튜플만을 조인하여 출력한다.)

-- left outer join
16-1-1.  오라클 만의 where절을 이용한 left outer join방법 (employees의 모든 department_id값은 표시)
select *
from employees emp, departments dept
where emp.department_id = dept.department_id(+); 
-- (+)는 기준이 되는 테이블에 추가될 정보라고 생각하면 기억하기 쉽다.
-- 결과: employees테이블에는 department_id 값이 null인 튜플이 존재하나 departments 테이블에는 
          department_id 컬럼에 null값이 존재하지 않는다.
          employees테이블에 존재하는 튜플 정보는 전부 나와야함으로 조인 테이블에 department_id가 null인 튜플이 존재 할 것이다.

16-1-2. Ansi조인을 통해 위의 결과와 동일한 검색을 하는 sql문을 작성하시오.
select *
from employees emp left outer join departments dept
on emp.department_id = dept.department_id;

-- right outer join
16-2-1. 반대로 departments테이블에서 employees테이블을 outer join을 하는 sql문을 oracle 독자 문법과 ansi 문법을 통해 
	작성하시오.
	1)
	select *
	from employees emp, departments dept
	where emp.department_id(+) = dept.department_id;
	2)
	select *
	from employees emp right outer join departments dept
	on emp.department_id = dept.department_id;

-- full outer join
16-3-1.  employees 테이블과 departments 테이블의 full outer join을 검색하는 sql문을 작성하시오. 
select *
from employees emp full outer join departments dept
on emp.department_id = dept.department_id;

--------------------------------------------------------------------------------------
17. 집합연산

17-1 union(합집합)
17-1-1. 테이블 A 와 테이블 B가 같은 인스턴스 스키마를 가지고 있을 때, 중복 튜플을 배제한 합집합 테이블을 검색하시오.

select * from A
union
select * from B;

17-1-2. 테이블 A와 테이블 B가 같은 인스턴스 스키마를 가지고 있을 때, 중복 튜플을 포함한 모든 튜플을 검색하는 sql문을 작성하시오.
select * from A
union all
select * from B;

17-2. intersection (교집합)
17-2-1. employees테이블과 departments테이블의 department_id 컬럼의 교집합을 구하시오.
select department_id  from employees
intersection
select department_id  from departments;

17-3. minus (차집합)

17-3-1. employees 테이블의 5~10행을 인스턴스로 가지는 테이블 A 와 
          employees 테이블 8~15행을 인스턴스로 가지는 테이블 B의 차집합을 구하시오.
select *
from (select rownum rowcnt, employees.* from employees) emp
where emp.rowcnt >=5 and emp.rowcnt<=10
MINUS
select *
from (select rownum rowcnt, employees.* from employees) emp
where emp.rowcnt >=8 and emp.rowcnt<=15;

17-4. catesian product(교차곱)
17-4-1. employees테이블과 department 테이블의 교차곱을 출력하시오.
1)
	select *
	from employees, departments;
2)
	select *
	from employees cross join departments;


--------------------------------------------------------------------------------------
18. 계층형 쿼리

18-1. 회사에서 직원과 상사와의 관계는 계층형으로 이루어져 있다.
	employees테이블에서 employee_id 컬럼과 manager_id 컬럼은 계층형으로써 표현 될 수 있는 데이터인데
	이를 시각적으로 또는 테이블로써 확인할 수 있는 쿼리가 바로 계층형 쿼리이다.
18-1-1. 	루트 노드[튜플] -> 잎사귀노드[맨 아래 level의 튜플]로의 검색 sql문을 작성하시오.
	select emp.*, LEVEL 
	from employees emp
	start with manager_id is null
	connect by manager_id = prior employee_id;
	
	※LEVEL 은 수도 컬럼 [계층을 표현하기 위한 수도컬럼]
	
18-1-2. 잎사귀 노드-> 루트 노드로의 계층형 검색 sql문을 작성하시오		
	select emp.* , LEVEL
	from employees emp
	start with manager_id = 4	
	connect by department_id = prior manager_id;




--추가해야함

-----------------------------------------------------------------------------------------
19.서브쿼리

※서브쿼리는 select 구문 안에 존재하는 또다른 select쿼리를 뜻한다.

select 절에 사용되는 서브쿼리는 스칼라 서브쿼리라고 하며, 
from 절에 사용되는 서브쿼리는 인라인 뷰라고 한다.
마지막으로 where절에 사용되는 서브쿼리는 이름 그대로 서브쿼리라고 불린다.

서브쿼리가 반환하는 행이 다중 행일 경우에는 조건비교시에 in ,exists ,all ,any 비교함수를 사용해야 한다.
서브쿼리가 반환하는 행이 단일 행일 경우에는 조건 비교시에 =, <=, >=,!= 등의 비교 연산자를 사용하여 조건을 비교할 수있다.
19-1. group by 절에 쓰일 수 있는 함수들

19-1-1. rollup(attr1,attr2....)

	1)
	select department_id, sum(salary)
	from employees
	group by department_id;
	2)
	select department_id, sum(salary)
	from employees emp
	group by rollup(department_id);

	※ 1) 2)의 출력결과를 비교해보면 department_id가 null일때 전체 합계가 나오는 튜플을 확인할 수 있다.
	rollup의 의미를 잘 생각해보자 마치 계란말이 하듯 무언가를 말아버릴 것 같은 느낌이 들지 않나?
	
	rollup의 기재된 속성리스트들의 끝에 있는 속성부터 표현할 데이터가 없어 null의 값을 가져야할경우 해당 튜플은 합계를 반환하며,
	맨 끝에서 두번째 속성의 값을 변경하여 맨 끝 속성이 그룹으로 표현할 값이 있는지 확인하고 출력한다.
	다시 맨 끝 속성이 표현할 값이 없어 null이 된다면 합계 값을 표현하고, 맨 뒤의 두번째 속성을 변경하여 앞전의 행위를 반복한다.
	이 때, 맨 끝의 두번 째 속성또한 표현할 값이 없어 null 값을 가져야한다면, 두번째 속성 그룹의 합계를 출력하고
	뒤에서 세번째 속성값을 변경하여 이전에 했던 작업을 반복해 나가는 것이 roll업이다.

	즉. 끝에서 부터 데이터가 다 떨어지는 null값이 나오기 전까지 출력하다 null값이 나오면 데이터를 말아버리 듯 
	다음 속성의 값의 유무를 확인하여 데이터를 표현하는 방법이다.

	3)
	  select department_id, job_id(salary)
	  from employees
	  group by rollup(department_id, job_id);  -- rollup은 작성하는 인자 속성의 순서가 변경되는 출력되는 형태도 변한다.

	부서	직업	합계
		SA_REP		7000   -> employees 테이블엔 부서가 null인사람이 존재하며 직업은 SA_REP이다. 부서가 null인 사람이 한명밖에 없으므로 
				7000   -> 다음 튜플의 job_id값은 null이며 rollup의 마지막 컬럼의 값이 null임으로 null부서의 합계가 다음 컬럼의 값으로 오게 된다.
	10	AD_ASST		4400 
	10			4400
	20	MK_MAN		13000 -> 부서 20에는 MK_MAN라는 직업을 가진 사람들과 MK_REP 라는 직업을 가진 사람들로 구성되어 있다.
	20	MK_REP		6000   -> 부서 20에 모든 직업그룹의 급여합을 출력하였다면, 다음 튜플의 값은..
	20			19000 -> 부서 20 내의 직업그룹은 null값이 될것이고, 그에 따른 부서그룹의 합계가 표현될 것 이다.  부서 20의 job_id는 모두 표현하였음으로 부서의 값을 변경하여 같은 작업을 한다.
	30	PU_MAN		11000 
	30	PU_CLERK	13900
	30			24900
	40	HR_REP		6500
	40			6500
	50	ST_MAN		36400
	50	SH_CLERK	64300
	50	ST_CLERK		55700
	50			156400
	60	IT_PROG		28800
	60			28800
	70	PR_REP		10000
	70			10000
	80	SA_MAN		61000
	80	SA_REP		243500
	80			304500
	90	AD_VP		34000
	90	AD_PRES		24000
	90			58000
	100	FI_MGR		12008
	100	FI_ACCOUNT	39600
	100			51608
	110	AC_MGR		12008
	110	AC_ACCOUNT	8300
	110			20308 --> 110번 부서의 부서 총액을 표현하고 나면 표현할 부서 컬럼의 데이터는 존재하지 않는다. 그러므로 다음 튜플은
				691416 --> 부서id 값과 직업id 값이 null이며 employees테이블의 직원들의 모든 급여 합이 여기에 표시되게 된다.


19-1-2. grouping sets(attr1,attr2,attr3....)

	※ grouping sets() 함수는 인자값으로 기재된 속성을 독립적으로 그룹화하여 그룹에 해당하는 값을 보여준다.

	1) select department_id , job_id , sum(salary)
	   from employees
	   group by grouping sets(departments_id, job_id); -- grouping sets는 인자값으로 작성한 속성의 순서가 상관없다.
-- 출력결과
	IT_PROG		28800
	AC_MGR		12008
	AC_ACCOUNT	8300
	ST_MAN		36400
	PU_MAN		11000
	AD_ASST		4400
	AD_VP		34000
	SH_CLERK	64300
	FI_ACCOUNT	39600
	FI_MGR		12008
	PU_CLERK	13900
	SA_MAN		61000
	MK_MAN		13000
	PR_REP		10000
	AD_PRES		24000
	SA_REP		250500
	MK_REP		6000
	ST_CLERK		55700
	HR_REP		6500
100			51608
30			24900
			7000
90			58000
20			19000
70			10000
110			20308
50			156400
80			304500
40			6500
60			28800

 출력결과를 보면 job_id만 따로 그룹화하여 job_id의 그룹 합계를 보여주다가.
 job_id가 null인 튜플에서부턴 department_id 만 독립적으로 그룹화하여 department_id 그룹별 합계를 표시한다.

19-1-3. cube(attr1, attr2, attr3...)

	1) select department_id, job_id, sum(salary)
	   from employees
	   group by cube(department_id, job_id);
	
※ cube는 조합 할 수있는 모든 조합에 대한 합계값을 구하는데 사용된다. 즉 grouping sets와 rollup의 기능을 합친것이라고 생각하면 된다.


-- rollup(department_id,job_id) 에서는 [부서별, 직원별 - 급여] 와 {부서별 총급여}, (총액)이 표시 되었고, grouping sets(department_id,jobid)에서는 {부서별 총급여} 와 [직업별 총급여]가
--  출력되었음으로 두 출력 값의 혼합. (중복을 배제하여..) 즉: [부서별, 직원별 - 급여], {부서별 총급여}, [직업별 총급여], (총액) 네 가지 정보가 표시 되겠다.
			7000    -- 직업별 총급여 (department_id가 null인 직원이며 job_id값은 SA_REP 이나 아래에 JOB_ID가 접힐때 부서가 null인 경우의 출력값을 표시 한것 -> 즉 부서가 null인 값의 합계 표시)
			691416 -- 총액
	AD_VP		34000   -- 직업별 총급여 시작
	AC_MGR		12008
	FI_MGR		12008
	HR_REP		6500
	MK_MAN		13000
	MK_REP		6000
	PR_REP		10000
	PU_MAN		11000
	SA_MAN		61000
	SA_REP		7000     -- 부서가 null값이며 job_id 컬럼값이 존재[SA_REP]하였을때 출력하는 튜플 -=> 즉. {첫번째 행과 해당 행}이 rollup쌍이나 옵티마이져의 내부 정렬에 의해 마치 잘못된 출력 데이터처럼 보인다. [이건 직업별 총급여가 아닌 예외적인 행이다.]
	SA_REP		250500
	ST_MAN		36400
	AD_ASST		4400
	AD_PRES		24000
	IT_PROG		28800
	PU_CLERK	13900
	SH_CLERK	64300
	ST_CLERK		55700
	AC_ACCOUNT	8300
	FI_ACCOUNT	39600  -- 직업별 총급여 끝
10			4400   -- rollup 시작
10	AD_ASST		4400
20			19000
20	MK_MAN		13000
20	MK_REP		6000
30			24900
30	PU_MAN		11000
30	PU_CLERK	13900
40			6500
40	HR_REP		6500
50			156400
50	ST_MAN		36400
50	SH_CLERK	64300
50	ST_CLERK		55700
60			28800
60	IT_PROG		28800
70			10000
70	PR_REP		10000
80			304500
80	SA_MAN		61000
80	SA_REP		243500
90			58000
90	AD_VP		34000
90	AD_PRES		24000
100			51608
100	FI_MGR		12008
100	FI_ACCOUNT	39600
110			20308
110	AC_MGR		12008
110	AC_ACCOUNT	8300


19-2-1 grouping(속성) : group화에 관련한 수도컬럼이다.
※ grouping() 함수는 인자값으로 작성한 컬럼의 값이 null일 경우 1을 출력한다. 즉 rollup, grouping set(), cube 등 그룹화 속성들의 합계값을 표시할 때 가시성을 위한 컬럼이다.
	select department_id , grouping(department_id), job_id, grouping(job_id)
	from employees
	group by rollup(department_id, job_id);

-- 결과 값을 보면 grouping(job_id)는 job_id 가 접힐때 1을 반환하며, grouping(department_id) 는 department_id 값이 접힐때 1을 반환한다.

	0	SA_REP		0
	0			1
10	0	AD_ASST		0
10	0			1
20	0	MK_MAN		0
20	0	MK_REP		0
20	0		 	1
30	0	PU_MAN		0
30	0	PU_CLERK	0
30	0			1
40	0	HR_REP		0
40	0			1
50	0	ST_MAN		0
50	0	SH_CLERK	0
50	0	ST_CLERK		0
50	0			1
60	0	IT_PROG		0
60	0			1
70	0	PR_REP		0
70	0			1
80	0	SA_MAN		0
80	0	SA_REP		0
80	0			1
90	0	AD_VP		0
90	0	AD_PRES		0
90	0			1
100	0	FI_MGR		0
100	0	FI_ACCOUNT	0
100	0			1
110	0	AC_MGR		0
110	0	AC_ACCOUNT	0
110	0			1
	1			1

==================================================================
20.윈도우 함수 
※윈도우 함수는 행과 행간의 관계를 정의하기 위해서 제공되는 함수이다.
순위 합계 평균 행위치등을 조절할 수 있다.

-- 윈도우 함수의 구조 {select 절에서 사용}

[집계함수(속성) | 순위함수(속성)] over(partition by 파티션속성 order by 파티션 정렬 속성
			         rows between unbounded [preceeding|current row|following] and unbounded [preceeding|current row|following])

[집계함수(속성) | 순위함수(속성)] over(partition by 파티션속성 order by 파티션 정렬 속성
			         range 값 between 값 [preceeding|current row|following] and 값 [preceeding|current row|following])


[집계함수(속성) | 순위함수(속성)] over(partition by 파티션속성 order by 파티션 정렬 속성
			           range 값 [preceding|following])


------------------------------------------
-- range 와 rows의 차이

order by 속성을 기준으로 range는 무조건 현재 출력중인 행을 기준으로 하여, {값1 Preceding의 경우} 밑으로 값1 만큼 차이나는 속성의 값들이 존재할 경우 연산에 포함시키며, 
{값2 Following의 경우} 위로 값2만큼 차이나는 속성들이 존재할 경우 연산에 포함시키는 것을 뜻한다.



rows 는 파티션내 맨 처음 나오는 행(unbounded preceding)[절대적 위치] 맨 나중에 나오는 행(unbounded following)[절대적위치] 과 현재 출력중인 행(current row)[가변적 위치]
의 옵션을 이용하여 파티션내 윈도우의 연산를 지정한 수있다. [※ 즉. 파티션의 양 끝 중 하나는 무조건 포함해야한다.]
------------------------------------------
20-1-1. employees 테이블에서 윈도우 절을 사용하지 않고 누적합계를 구하시오. (정렬은 salary속성을 기준으로 정렬하시오.)

select emp.* , sum(salary) over(order by salary)
from employees emp;

20-1-2. employees 테이블에서 윈도우 절을 사용하여 않고 누적합계를 구하시오. (정렬은 salary속성을 기준으로 정렬하시오.)
select emp.* , sum(salary) over(order by salary rows between unbounded preceding and current row)
from employees emp;

20-1-3. 20-1-1과 20-1-2의 출력결과의 차이점을 설명하시오.

	※ 20-1-1.의 출력결과는 같은 급여액을 받는 직원이 존재할 경우 묶어서 연산하므로, 동일한 급여액을 받는 직원의 윈도우 속성의 출력결과. 같은 누적합계를 갖는다.
	즉.  a1 = 2100 ,a2 = 2200 ,a3= 2200 의 급여를 받는다면 누적합계 출력은 a1누적=2100 , a2누적=6500 , a3누적= 6500 의 결과를 갖게 된다.
	20-1-2.의 출력결과는 윈도우가 한행 씩 커짐으로 같은 급여액을 갖는 사람들을 한대 묶어 연산하지 않음으로 더 옳바른 누계금액을 알 수 있는 컬럼이 된다.
	즉.  a1 = 2100 ,a2 = 2200 ,a3= 2200 의 급여를 받는다면 누적합계 출력은 a1누적=2100 , a2누적=4300 , a3누적= 6500 의 결과를 갖게 된다.
	
20-1-4. 현재출력중인 금액부터 파티션의 맨 끝의 금액을 합한 누계 금액을 출력하는 sql문을 작성하시오.

select emp.*, sum(salary) over(order by salary rows between current row and unbounded following)
from employees emp;

20-1-5. 부서별 누적 금액을 구하시오.
select emp.* , sum(salary) over(partition by department_id order by salary)
from employees emp;

20-1-6. 20-1-5. 의 sql문과 동일한 출력을 하는 sql문을 윈도우절을 포함하여 작성하시오.

select emp.*, sum(salary) over(partition by department_id order by salary rows between unbounded preceding and current row)
from employees emp;
	
20-1-7. 각 부서의 구성원들의 튜플에 부서별 합계 금액 속성을 추가하시오.

select emp.*, sum(salary) over(partition by department_id order by salary rows between unbounded preceding and unbounded following)
from employees emp;


20-2-1. range를 이용하여 두 행이전의 금액에서부터 현재 출력행 까지의 누적 금액을 구하시오.
select emp.* , sum(salary) over(order by salary range 2 preceding)
from employees emp;

20-2-2. 20-2-1.의 출력결과와 같은 출력을 가지는 sql문을 between 구절을 사용하여 작성하시오.
select emp.* , sum(salary) over(order by salary range between 2 preceding and current row)
from employees emp;

20-2-3. range를 이용하여 한 행 이전의 금액부터 두 행 이후의 금액을 누적한 금액을 구하시오.
select emp.*, sum(salary) over(order by rowcnt range between 1 preceding and 2 following)
from (SELECT ROWNUM ROWCNT,* FROM EMPLOYEES ) emp;

20-2-4. 현재 행의 salary를 기준으로 밑으로 1000이하로 차이나는 금액과 위로 2000 이하로 차이나는 금액을 더하시오.
select emp.*, sum(salary) over(order by salary range between 1000 preceding and 2000 following)
from (select rownum as rowcnt, employees.* from employees) emp;


20-3.  순위관련 수도컬럼 함수


--20-3-1. rank() 순위 함수 [특정 파티션 내에서 순위를 계산하는 함수로 같은 값에서는 같은 순위를 할당한다. 그러나 다음 순위를 부여할때는 동률순위를 부여받은 사람수에 영향을 받아 순위가 결정된다.]

	--1) 부서별 직원들의 급여 순위를 나타내시오.[가장 많이 받는 사람이 1등](같은 급여를 받는 직원은 동률 순위를 부여하며, 동률 순위를 부여한 후에는 다음에 와야하는 순위가 생략된다.)
	select emp.* , rank() over(partition by department_id order by salary desc) rank
	from employees emp
    order by department_id;
    
    --※ rank 관련함수는 윈도우절을 사용할 수 없다. ==> 당연하다. window절의 current row를 생각하면 가변적으로 순위가 정해져야 하는데 한 윈도우에 한 행이 추가될때마다 순위를 변경해주어야 한다는게
    -- 인공지능도 아니고 불가능하다는게 느낌이 오지 않나?
    -- 아래의 sql문은 당연히 에러를 발생시킨다.
    select emp.* , rank() over(partition by department_id order by salary desc rows between unbounded preceding and unbounded following) rank
	from employees emp
    order by department_id;
   
--20-3-2. dense_rank() 순위 함수 [동일한 값에서는 같은 순위로 계산한다. 동률 순위를 부여하더라도 다음 순위를 부여할 때 영향이 없다.]
-- ※ 1등이 1명 2등이 2명이라면 3등은 없고 다음 순위로 4등이 부여
	--1) 같은 급여를 받는 직원은 동률 순위를 부여하며, 이후에 순위를 부여받는 사람은 동률 순위를 부여받은 사람 수의 영향을 받지않는 sql문을 작성하시오.
	select emp.* , dense_rank() over(partition by department_id order by salary) dense_rank
	from employees emp
	order by department_id;
   

20-3-3. row_number() [같은 값을 가지더라도 정렬되는 순서대로 고유한 값을 부여한다.]
-- ※ 같은 값을 가진 2등을 부여하려하는데 같은 값이 3명이라고 가정하면 정렬 순서에 따라 가장 먼저오는 튜플에 2등을 부여 나머지는 3등 4등 을 부여

	1) 동률 급여일 시 정렬순서에 따라순위를 부여하는 sql문을 작성하시오. 
	select emp.* , row_number() over(partition by department_id order by salary) row_num
	from employees emp;


20-4. 행관련 수도컬럼 함수

20-4-1. 파티션의 첫 번째 값을 반환하는 FIRST_VALUE()함수
	select emp.* , first_value(salary) over(partition by department_id rows unbounded preceding and unbounded following) as 첫행-끝행",
		     first_value(salary) over(partition by department_id rows unbounded preceding and current row) as "첫행-현재행",
		     first_value(salary) over(partition by department_id rows current row and unbounded following) as "현재행-끝행"
	from employees emp;

   
--20-4-2. 파티션의 마지막 값을 반환하는 LAST_VALUE() 함수
	select   emp.* , 
             last_value(salary) over(partition by department_id order by salary rows between unbounded preceding and unbounded following) as "첫행-끝행",
		     last_value(salary) over(partition by department_id order by salary rows between unbounded preceding and current row) as "첫행-현재행",
		     last_value(salary) over(partition by department_id order by salary rows between current row and unbounded following) as "현재행-끝행"
	from employees emp;
    
--20-4-3. 현재 행 이전의 @행의 값을 반환하는 LAG() 함수
    select   emp.* , 
             LAG(salary,2) over(partition by department_id order by salary ) lag
	from employees emp;
    
     select   emp.* , 
             LAG(salary,2,null) over(partition by department_id order by salary ) lag
	from employees emp;

--20-4-3. 현재행을 기준으로 특정 행 떨어져 있는 행의 값을 반환하는 lead()함수
--※ lead는 이끈다라는 뜻이 있어 현재 행을 기준으로 @행 이전의 행의 값을 결과로 가져올것 같지만.
-- 사실 lead는 현재행이 이끈다 라는 의미로써 @행 이후의 행의 값을 결과로 가져온다.
    select   emp.* , 
             lead(salary,2) over(partition by department_id order by salary ) lead
	from employees emp;
    
    select   emp.* , 
             lead(salary,2,null) over(partition by department_id order by salary ) lead
	from employees emp;
    --※ lead, lag함수는 가져올 행이 없을 경우 대체할 값을 3번째 인자로 설정할 수 있다.
    
    
    
--20-5-1. 누적백분률을 구하는 함수 cume_dist()함수 [자신보다 작거나 같은 행에 대한 누적 백분률을 구하는 함수이다.]
       -- 와 순위 퍼센트를 구하는 함수인 percent_rank() 함수.
    select emp.* , rank()over(partition by department_id order by salary) rank,
           percent_rank() over(partition by department_id order by salary) as  "순위퍼센트" ,
           cume_dist() over(partition by department_id order by salary)as "순위누적백분률",
           RATIO_TO_REPORT(salary) over(partition by department_id)as "합계누적백분율"
    from employees emp
    where emp.department_id = 60;
    
--20-5-2. 파티션별로 N등분한 결과를 조회하는 NTILE함수
    select emp.*, Ntile(4) over(partition by department_id order by salary) as "n등분순위"
    from employees emp
    where emp.department_id in (50,60);
    


============================================================================================
테이블 파티션

※특징
-- 대용량의 테이블을 여러개의 데이터 파일로 분리해서 저장한다.
-- 테이블을 여러개의 데이터 파일로 분리하여 저장하면 입력 ,수정 ,삭제 , 검색 성능이 향상된다.
-- 테이블의 각각의 파티션은 파티션별로 독립적으로 관리될 수 있다.[ 파티션 별로 백업과 복구가 가능하고 파티션 전용 인덱스도 생성가능 하다. ]
-- 데이터 조회 시 데이터의 범위를 줄여서 성능을 향상시킨다.
-- 오라클db의 논리적인 관리 단위인 테이블 스페이스 간의 이동이 가능하다.


※ 테이블 스페이스 란??
-- https://m.blog.naver.com/PostView.nhn?blogId=ohmydata00&logNo=221262610912&proxyReferer=https:%2F%2Fwww.google.com%2F
-- http://www.gurubee.net/lecture/1095 참고
/*
	오라클 내부에서는 데이터 블록(data block), 익스텐트(extent), 세그먼트(segment),
	테이블스페이스(tablespace)라는 논리적인 개념으로 데이터 들을 관리합니다.
 
	오라클에서 데이터를 저장하는 가장 최소의 논리적인 단위가 데이터 블록이며,
	데이터 블록이 모여서 익스텐트가 되고, 익스텐트가 모여서 세그먼트,
	세그먼트가 모여서 테이블 스페이스가 됩니다. 실제로 물리적인 데이터 파일
	(확장자가 dbf 혹은 ora인 파일)은 테이블 스페이스와 대응됩니다.
*/

※
create tablespace test_tbs1
datafile 'C:\Users\KIMHB\Desktop\tablespace\test_tbs1.dbf' --파일경로
size 10M --초기 데이터 파일 크기 설정
autoextend on next 10M -- 초기 크기 공간을 모두 사용하는 경우 자동으로 파일의 크기가 커지는 기능
maxsize 100M -- 데이터파일이 최대로 커질 수 있는 크기 지정 기본값 = unlimited
default storage( -- 초기 tablespace의 저장소를 사용자가 커스터마이징시 사용. 
    INITIAL    10K 
    NEXT       10K
    MINEXTENTS 2
    MAXEXTENTS 50
    PCTINCREASE 50
);
-- INITIAL : 테이블 스페이스의 맨 첫번째 Extents의 크기
-- NEXT : 다음 Extents의 크기
-- MINEXTENTS : 생성할 Extents의 최소 값
-- MAXEXTENTS : 생성할 Extents의 최대 값
-- PCTINCREASE : Extents의 증가율, Default값은 50 입니다

-- default stoage = 첫 번째 extend = 10k 두 번째 extend = 10k 세 번째 extend = 1[초기 extend의 비율]+ (1[초기 extend의 비율] x 50%[PCTINCREASE값]) => 10k + 5k = 15k 이나 컴퓨터는 2진수 임으로 16k가 증가.


21-1-1. Range partition 

※테이블의 컬럼 중에서 값의 범위를 지정하여 여러 개의 파티션으로 데이터를 나누어 저장하는 것이다.

create or replace table my_part(
	my_no NUMBER,
	my_year INT NOT NULL,
	my_month INT NOT NULL,
	my_day INT NOT NULL,
	my_value  VARCHAR2(30)
)partition by range(my_year, my_month, my_day)
(
	partition my_q1 values less than(2016,07,01) tablesapce test_tbs1,
	partition my_q2 values less than(2017,01,01) tablespace test_tbs2,
	partition my_q3 values less than(2017,07,01) tablespace test_tbs3 -- 파티션을 특정 테이블스페이스에 저장하여 관리하겠다는 것으로 파티션 별로 관리가 필요할 시에만 tablespace 이하 구문을 작성해주면 된다.
);


INSERT INTO my_part VALUES(1, 2016, 01, 03, 'scott');
INSERT INTO my_part VALUES(2, 2017, 05, 17, 'jones');
INSERT INTO my_part VALUES(3, 2017, 01, 12, 'miller');
INSERT INTO my_part VALUES(4, 2016, 06, 22, 'ford');
INSERT INTO my_part VALUES(5, 2016, 11, 04, 'lion');
INSERT INTO my_part VALUES(6, 2016, 12, 21, 'tiger');

COMMIT;

-- 결과 : test_tbs1 에 my_q1파티션이 저장되어 있으며, my_q1파티션에는 'scott'과 'ford'가 저장되며
	test_tbs2 에 my_q2파티션이 저장, my_q2파티션에는 'lion'과 'tiger'이 저장
	test_tbs3 에 my_q3파티션이 저장, my_q3파티션에는 'jones'와 'miller'가 저장되게 된다.


21-1-2. List partition

※ list partition이란 특정 값을 기준으로 파티션을 구분하는 것이다.[범위가 아니라.]
CREATE TABLE emp_list_pt

       (EMPNO NUMBER NOT NULL,
        ENAME VARCHAR2(10),
        JOB VARCHAR2(9),
        MGR NUMBER(4),
        HIREDATE DATE,
        SAL NUMBER(7, 2),
        COMM NUMBER(7, 2),
        DEPTNO NUMBER(2)
)PARTITION BY LIST (JOB) – 특정 컬럼 지정.
(PARTITION emp_list_pt1 VALUES ('MANAGER') TABLESPACE TEST_TBS1, 
 PARTITION emp_list_pt2 VALUES ('SALESMAN') TABLESPACE TEST_TBS2,
 PARTITION emp_list_pt3 VALUES ('ANALYST') TABLESPACE TEST_TBS3,
 PARTITION emp_list_pt4 VALUES ('PRESIDENT', 'CLERK') TABLESPACE TEST_TBS4);


21-1-3. Hash partition
※DBMS에서 내부적으로 해시함수를 사용해서 데이터를 분할한다. [특징만 알아두자.]

21-1-4. composite partition -> 여러가지 partition기법을 조합하여 사용하는 것.[이것도 특징만 알아두자]

21-2. 파티션 인덱스[특징만 알아두자]
- global index => 여러 파티션에서 하나의 인덱스 만을 사용함
- local index => 파티션 별로 독립적인 인덱스를 갖는다.
- prefixed index => 파티션키를 인덱스 키로 하여 인덱스를 생성





